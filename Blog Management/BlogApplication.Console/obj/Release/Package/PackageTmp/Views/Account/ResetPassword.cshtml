
@using BlogApplication.Data.GlobalTypes
@using BlogApplication.WebFramework.HtmlExtensions
@model BlogApplication.Data.General.Code
@{
    if (Model.Type == Convert.ToByte(CodeType.Welcome))
    {
        ViewBag.Title = Html.GetWord("Welcome");
    }
    else
    {
        ViewBag.Title = Html.GetWord("Reset Password");
    }
    Layout = "~/Views/Shared/_AnonymousLayout.cshtml";
}

<div class="tab-content">
    <input type='hidden' id='ViewMessages' />
    <div id="login" class="tab-pane active">
        @using (Html.BeginForm("ResetPassword", "Account", new { returnUrl = this.Request["returnUrl"] }, FormMethod.Post, new { @class = "form-signin", @id = "ResetForm" }))
            {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(op => op.UserID)
            @Html.HiddenFor(op => op.Code1)
            <p class="text-muted text-center btn-block btn btn-primary btn-rect">
                @Html.GetWord("Please Enter Your First Password")
            </p>

                <div class="form-group">
                    <div class="col-lg-12">
                        @Html.Password("Password",null ,new { @placeholder = Html.GetWord("Password"), @class = "form-control" })
                    </div>
                </div>


                <div class="form-group">
                    <div class="col-lg-12">
                        @Html.Password("ConfirmPassword", null, new { @placeholder = Html.GetWord("Confirm Password"), @class = "form-control" })
                    </div>
                </div>

                <button class="btn text-muted text-center btn-danger" type="submit">@Html.GetWord("Set Password")</button>
        }
    </div>
</div>

@section scripts{
    @Html.ShowMessages()
    <script>
        $("#ResetForm").validate({
            rules: {
                Password: {
                    required: true,
                    minlength: 6,
                    maxlength: 32,
                    alphaNumeric: true
                },
                ConfirmPassword: {
                    required: true,
                    minlength: 6,
                    maxlength: 32,
                    alphaNumeric: true,
                    equalTo: "#Password"
                }
            },
            messages: {
                Password: {
                    required: '@Html.GetWord("Required")',
                    minlength: '@Html.GetWord("At least 6 characters required!")',
                    maxlength: '@Html.GetWord("No longer than 32 characters")',
                    alphaNumeric: '@Html.GetWord("It must be alpha-numeric")'
                },
                ConfirmPassword: {
                    required: '@Html.GetWord("Required")',
                    minlength: '@Html.GetWord("At least 6 characters required!")',
                    maxlength: '@Html.GetWord("No longer than 32 characters")',
                    alphaNumeric: '@Html.GetWord("It must be alpha-numeric")',
                    equalTo:'@Html.GetWord("Password does not match")'
                }
            },
            errorClass:
                'help-block',
            errorElement:
                'span',
            highlight:
                function (element, errorClass, validClass) {
                    $(element).parents('.form-group').removeClass('has-success').addClass('has-error');
                },
            unhighlight: function (element, errorClass, validClass) {
                $(element).parents('.form-group').removeClass('has-error').addClass('has-success');
            }
        });
    </script>

}
